// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π email —Å–µ—Ä–≤–∏—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö email —Å–µ—Ä–≤–∏—Å–æ–≤
const brevoAPIService = require('./emailServiceBrevoAPI');
const brevoSMTPService = require('./emailServiceBrevo');
const sendGridService = require('./emailServiceSendGrid');
const gmailService = require('./emailServiceGmailSMTP');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getEmailService = () => {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Brevo API > Brevo SMTP > Gmail SMTP > SendGrid
  if (process.env.BREVO_API_KEY && process.env.BREVO_FROM_EMAIL) {
    console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º Brevo API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    return brevoAPIService;
  } else if (process.env.BREVO_USER && process.env.BREVO_SMTP_KEY) {
    console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º Brevo SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    return brevoSMTPService;
  } else if (process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {
    console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    return gmailService;
  } else if (process.env.SENDGRID_API_KEY && process.env.SENDGRID_FROM_EMAIL) {
    console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º SendGrid –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email');
    return sendGridService;
  } else {
    console.error('‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω email —Å–µ—Ä–≤–∏—Å!');
    console.error('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Brevo API, Brevo SMTP, Gmail SMTP –∏–ª–∏ SendGrid –≤ .env —Ñ–∞–π–ª–µ');
    throw new Error('Email service not configured');
  }
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
const sendVerificationEmail = async (email, verificationToken, userName = '') => {
  try {
    const emailService = getEmailService();
    return await emailService.sendVerificationEmail(email, verificationToken, userName);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ email —Å–µ—Ä–≤–∏—Å–∞:', error);
    return {
      success: false,
      error: 'Email service not available: ' + error.message
    };
  }
};

const sendPasswordResetEmail = async (email, resetToken, userName = '') => {
  try {
    const emailService = getEmailService();
    return await emailService.sendPasswordResetEmail(email, resetToken, userName);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ email —Å–µ—Ä–≤–∏—Å–∞:', error);
    return {
      success: false,
      error: 'Email service not available: ' + error.message
    };
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–µ—Ä–≤–∏—Å–∞
const testEmailService = async () => {
  try {
    const emailService = getEmailService();
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π email —Å–µ—Ä–≤–∏—Å...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ Brevo email
    const testEmail = process.env.BREVO_FROM_EMAIL || process.env.BREVO_USER || process.env.GMAIL_USER || process.env.SENDGRID_FROM_EMAIL;
    
    if (!testEmail) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω email –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    const result = await emailService.sendVerificationEmail(
      testEmail, 
      'test-token-12345', 
      '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    );
    
    if (result.success) {
      console.log('‚úÖ Email —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log(`üì® Message ID: ${result.messageId}`);
    } else {
      console.error('‚ùå Email —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.error);
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email —Å–µ—Ä–≤–∏—Å–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

module.exports = {
  sendVerificationEmail,
  sendPasswordResetEmail,
  testEmailService
};