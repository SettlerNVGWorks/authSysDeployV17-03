// –¢–µ—Å—Ç Brevo API —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º
require('dotenv').config();
const axios = require('axios');

console.log('üß™ –¢–µ—Å—Ç Brevo API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...\n');

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
console.log('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
console.log(`BREVO_API_KEY: ${process.env.BREVO_API_KEY ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (' + process.env.BREVO_API_KEY.substring(0, 20) + '...)' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`BREVO_FROM_EMAIL: ${process.env.BREVO_FROM_EMAIL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`BREVO_FROM_NAME: ${process.env.BREVO_FROM_NAME || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`FRONTEND_URL: ${process.env.FRONTEND_URL || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}\n`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if (!process.env.BREVO_API_KEY || !process.env.BREVO_FROM_EMAIL) {
  console.error('‚ùå –ù–ê–°–¢–†–û–ô–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´!');
  console.error('');
  console.error('–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Brevo API:');
  console.error('1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ https://app.brevo.com');
  console.error('2. –û–±–Ω–æ–≤–∏—Ç–µ .env:');
  console.error('   BREVO_API_KEY=–≤–∞—à-api-–∫–ª—é—á');
  console.error('   BREVO_FROM_EMAIL=–≤–∞—à-email');
  process.exit(1);
}

async function testBrevoAPI() {
  try {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º Brevo API...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ...');
    const accountResponse = await axios.get('https://api.sendinblue.com/v3/account', {
      headers: {
        'accept': 'application/json',
        'api-key': process.env.BREVO_API_KEY
      }
    });
    
    console.log('‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω!');
    console.log(`üìß Email: ${accountResponse.data.email}`);
    console.log(`üë§ –ò–º—è: ${accountResponse.data.firstName} ${accountResponse.data.lastName}`);
    console.log(`üìä –ü–ª–∞–Ω: ${accountResponse.data.plan[0]?.type || 'free'}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ
    console.log('\nüìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ...');
    
    const verificationLink = `${process.env.FRONTEND_URL || 'http://185.174.136.113'}/verify-email?token=test-token-12345`;
    
    const emailData = {
      sender: {
        name: process.env.BREVO_FROM_NAME || '–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1',
        email: process.env.BREVO_FROM_EMAIL
      },
      to: [
        {
          email: process.env.BREVO_FROM_EMAIL, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ–±—è –¥–ª—è —Ç–µ—Å—Ç–∞
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        }
      ],
      subject: 'üß™ –¢–µ—Å—Ç Brevo API - –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1',
      htmlContent: `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
                .header { 
                    background: linear-gradient(135deg, #16a34a, #15803d); 
                    color: white; 
                    padding: 20px; 
                    text-align: center; 
                    border-radius: 8px 8px 0 0;
                }
                .content { 
                    padding: 30px; 
                    background: #ffffff;
                    border: 1px solid #16a34a;
                    border-top: none;
                }
                .button { 
                    background: linear-gradient(135deg, #16a34a, #15803d);
                    color: white; 
                    padding: 15px 30px; 
                    text-decoration: none; 
                    border-radius: 8px; 
                    display: inline-block; 
                    margin: 20px 0;
                    font-weight: bold;
                }
                .footer { 
                    background-color: #1f2937; 
                    color: #9ca3af;
                    padding: 20px; 
                    text-align: center; 
                    font-size: 12px;
                    border-radius: 0 0 8px 8px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>‚úÖ BREVO API –†–ê–ë–û–¢–ê–ï–¢!</h1>
                    <h2>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ</h2>
                </div>
                <div class="content">
                    <h2>üéâ –û—Ç–ª–∏—á–Ω–æ! Brevo API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!</h2>
                    <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –≤–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ email —Ä–∞–±–æ—Ç–∞–µ—Ç.</p>
                    <p>–¢–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
                    
                    <div style="text-align: center;">
                        <a href="${verificationLink}" class="button">üîó –¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</a>
                    </div>
                    
                    <hr>
                    <p><strong>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:</strong></p>
                    <ul>
                        <li>–°–µ—Ä–≤–∏—Å: Brevo API</li>
                        <li>API –∫–ª—é—á: ${process.env.BREVO_API_KEY.substring(0, 20)}...</li>
                        <li>From Email: ${process.env.BREVO_FROM_EMAIL}</li>
                        <li>Frontend URL: ${process.env.FRONTEND_URL}</li>
                        <li>–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${new Date().toISOString()}</li>
                    </ul>
                </div>
                <div class="footer">
                    <p>üß™ –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã Sport Predictions</p>
                    <p>üöÄ Powered by Brevo API</p>
                </div>
            </div>
        </body>
        </html>
      `
    };
    
    const emailResponse = await axios.post('https://api.sendinblue.com/v3/smtp/email', emailData, {
      headers: {
        'accept': 'application/json',
        'api-key': process.env.BREVO_API_KEY,
        'content-type': 'application/json'
      }
    });
    
    console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Brevo API!');
    console.log(`üì® Message ID: ${emailResponse.data.messageId}`);
    console.log(`üåê –°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verificationLink}`);
    
    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('üî• Brevo API —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω–æ!');
    console.log('üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email ' + process.env.BREVO_FROM_EMAIL + ' - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ');
    
    return { success: true, messageId: emailResponse.data.messageId };
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê BREVO API:');
    console.error(`–°—Ç–∞—Ç—É—Å: ${error.response?.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.response?.data?.message || error.message}`);
    
    if (error.response?.data) {
      console.error('–î–µ—Ç–∞–ª–∏:', JSON.stringify(error.response.data, null, 2));
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
    console.error('\nüîç –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    if (error.response?.status === 401) {
      console.error('üîë –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
      console.error('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ Brevo –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    } else if (error.response?.status === 403) {
      console.error('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      console.error('   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞');
    } else if (error.response?.status === 400) {
      console.error('üìù –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞');
      console.error('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
    }
    
    return { success: false, error: error.response?.data?.message || error.message };
  }
}

testBrevoAPI();