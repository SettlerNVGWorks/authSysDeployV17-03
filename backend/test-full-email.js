// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º
require('dotenv').config({ path: '.env.production' });
const sgMail = require('@sendgrid/mail');

console.log('üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email...\n');

sgMail.setApiKey(process.env.SENDGRID_API_KEY);

async function testFullEmail() {
  try {
    const verificationToken = 'test-token-12345';
    const frontendUrl = process.env.FRONTEND_URL || 'http://185.174.136.113';
    const verificationLink = `${frontendUrl}/verify-email?token=${verificationToken}`;
    
    const emailData = {
      to: process.env.SENDGRID_FROM_EMAIL, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ–±—è –¥–ª—è —Ç–µ—Å—Ç–∞
      from: {
        email: process.env.SENDGRID_FROM_EMAIL,
        name: '–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1'
      },
      subject: '‚úÖ –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email - –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1',
      html: `
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
                .header { 
                    background: linear-gradient(135deg, #fbbf24, #d97706); 
                    color: white; 
                    padding: 20px; 
                    text-align: center; 
                    border-radius: 8px 8px 0 0;
                }
                .content { 
                    padding: 30px; 
                    background: #ffffff;
                    border: 1px solid #fbbf24;
                    border-top: none;
                }
                .button { 
                    background: linear-gradient(135deg, #fbbf24, #d97706);
                    color: white; 
                    padding: 15px 30px; 
                    text-decoration: none; 
                    border-radius: 8px; 
                    display: inline-block; 
                    margin: 20px 0;
                    font-weight: bold;
                }
                .footer { 
                    background-color: #1f2937; 
                    color: #9ca3af;
                    padding: 20px; 
                    text-align: center; 
                    font-size: 12px;
                    border-radius: 0 0 8px 8px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üëë –ü–†–û–ì–ù–û–ó–´ –ù–ê –°–ü–û–†–¢ ‚Ññ1</h1>
                    <h2>üß™ –¢–ï–°–¢ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Email</h2>
                </div>
                <div class="content">
                    <h2>–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!</h2>
                    <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</p>
                    <p>–°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤–∞—è):</p>
                    <div style="text-align: center;">
                        <a href="${verificationLink}" class="button">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email (–¢–ï–°–¢)</a>
                    </div>
                    <p>–ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞:</p>
                    <p style="word-break: break-all; color: #6b7280; font-size: 14px;">${verificationLink}</p>
                    <hr>
                    <p><strong>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</strong></p>
                    <ul>
                        <li>API Key: ${process.env.SENDGRID_API_KEY.substring(0, 15)}...</li>
                        <li>From Email: ${process.env.SENDGRID_FROM_EMAIL}</li>
                        <li>Frontend URL: ${process.env.FRONTEND_URL}</li>
                        <li>–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${new Date().toISOString()}</li>
                    </ul>
                </div>
                <div class="footer">
                    <p>üß™ –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ SendGrid</p>
                    <p>¬© 2025 –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ø–æ—Ä—Ç ‚Ññ1. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                </div>
            </div>
        </body>
        </html>
      `
    };
    
    console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞: ${emailData.to}`);
    console.log(`üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verificationLink}\n`);
    
    const result = await sgMail.send(emailData);
    
    console.log('‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üì® Message ID: ${result[0].headers['x-message-id']}`);
    console.log(`üìä Status Code: ${result[0].statusCode}`);
    console.log(`üåê Frontend URL –≤ –ø–∏—Å—å–º–µ: ${frontendUrl}`);
    
    return { success: true, messageId: result[0].headers['x-message-id'] };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:');
    console.error(`–ö–æ–¥: ${error.code || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`);
    console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.response && error.response.body) {
      console.error('–î–µ—Ç–∞–ª–∏:', JSON.stringify(error.response.body, null, 2));
    }
    
    return { success: false, error: error.message };
  }
}

testFullEmail();